'''
bitpanel_automation.py - Automa√ß√£o BitPanel com Selenium (Vers√£o com Tratamento de Popups)

Este script √© projetado para ser usado em conjunto com o seu arquivo `config.py`.
Certifique-se de que `config.py` e `bitpanel_automation.py` estejam na mesma pasta.
'''
import time
import random
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.chrome.service import Service
from selenium.common.exceptions import TimeoutException, NoSuchElementException, ElementClickInterceptedException
from config import Config
from selenium.webdriver.common.keys import Keys



# Mock do objeto 'db' para o c√≥digo funcionar de forma independente
class MockDB:
    def log_sistema(self, tipo, mensagem):
        print(f"LOG [{tipo.upper()}]: {mensagem}")

db = MockDB()

class BitPanelManager:
    def __init__(self):
        """Inicializa o gerenciador do BitPanel."""
        self.config = Config()
        if not self.config.BITPANEL_USER or not self.config.BITPANEL_PASS:
            raise ValueError("As credenciais BITPANEL_USER e BITPANEL_PASS n√£o foram encontradas no arquivo config.py.")
        self.driver = None
        self.is_logged_in = False

    def setup_driver(self, headless=True):
        """Configura o driver do Chrome com op√ß√µes otimizadas para lidar com popups."""
        options = Options()
        
        # Configura√ß√µes headless
        if headless:
            options.add_argument('--headless')
        
        # Op√ß√µes para estabilizar a conex√£o e evitar detec√ß√£o
        options.add_experimental_option("detach", True)
        options.add_experimental_option("excludeSwitches", ["enable-automation"])
        options.add_experimental_option('useAutomationExtension', False)
        options.add_argument('--log-level=3')
        options.add_argument('--no-sandbox')
        options.add_argument('--disable-dev-shm-usage')
        options.add_argument('--window-size=1920,1080')
        options.add_argument("--disable-blink-features=AutomationControlled")
        options.add_argument("--disable-gpu")
        options.add_argument("--disable-extensions")
        options.add_argument("--single-process") 

        
        # Desativa completamente o gerenciador de senhas do Chrome
        options.add_experimental_option("prefs", {
            "credentials_enable_service": False,
            "profile.password_manager_enabled": False,
            "profile.default_content_setting_values.notifications": 2,
            "profile.default_content_settings.popups": 0,
            "profile.managed_default_content_settings.popups": 0
        })
        
        # Usa o chromedriver.exe que est√° na mesma pasta do script
        try:
            service = Service(executable_path="chromedriver.exe")
            self.driver = webdriver.Chrome(service=service, options=options)
        except Exception as e:
            print(f"Erro ao configurar ChromeDriver: {e}")
            # Tenta usar o chromedriver do PATH
            self.driver = webdriver.Chrome(options=options)
            
        # Configurar timeouts
        self.driver.implicitly_wait(10)
        self.driver.set_page_load_timeout(30)

    def login(self, headless=True) -> bool:
        """Faz login no BitPanel usando as credenciais do config.py."""
        if self.is_logged_in:
            return True
        if not self.driver:
            self.setup_driver(headless=headless)

        try:
            print("üîê Fazendo login no BitPanel...")
            self.driver.get(f"{self.config.BITPANEL_URL}/login")

            wait = WebDriverWait(self.driver, 10)

            print("   - Aguardando p√°gina carregar completamente...")
            time.sleep(2)  # Aguarda carregamento inicial
            
            print("   - Aguardando campo de usu√°rio...")
            username_field = wait.until(EC.presence_of_element_located((By.NAME, "username")))
            
            print("   - Aguardando campo de senha...")
            password_field = wait.until(EC.presence_of_element_located((By.NAME, "password")))
            
            print("   - Preenchendo credenciais...")
            username_field.clear()
            username_field.send_keys(self.config.BITPANEL_USER)

            password_field.clear()
            password_field.send_keys(self.config.BITPANEL_PASS)
            
            print("   - Clicando em entrar...")
            login_button = wait.until(EC.element_to_be_clickable((By.CSS_SELECTOR, "button[type='submit']")))
            login_button.click()
            time.sleep(8)

            print("   - Verificando se o login foi bem-sucedido...")

            # Depois do login:
            time.sleep(8)
            # Abre nova aba/guia e fecha a antiga para "matar" popup de senha
            self.driver.execute_script("window.open(arguments[0], '_blank');", self.config.BITPANEL_URL + "/dashboard")
            self.driver.close()          # fecha a guia antiga
            self.driver.switch_to.window(self.driver.window_handles[0])

            # Verifica se chegou ao dashboard
            try:
                self.driver.switch_to.active_element.send_keys(Keys.ENTER)
                wait.until(EC.presence_of_element_located((By.XPATH, "//*[contains(text(), 'Dashboard')]")))
                self.is_logged_in = True
                print("‚úÖ Login realizado com sucesso!")
                return True
                
            except TimeoutException:
                # Se n√£o encontrou "Dashboard", verifica se est√° na URL correta
                if "dashboard" in self.driver.current_url.lower() or "painel" in self.driver.current_url.lower():
                    self.is_logged_in = True
                    print("‚úÖ Login realizado com sucesso (verifica√ß√£o por URL)!")
                    return True
                else:
                    print(f"‚ùå URL atual: {self.driver.current_url}")
                    raise TimeoutException("N√£o conseguiu confirmar o login")

        except TimeoutException:
            print("‚ùå Erro no login: A p√°gina demorou muito para carregar ou a confirma√ß√£o de login n√£o foi encontrada.")
            print(f"   URL atual: {self.driver.current_url}")
            return False
        except Exception as e:
            print(f"‚ùå Erro inesperado no login: {e}")
            return False

    def navegar_para_listas(self):
        """Navega para a p√°gina de listas com tratamento de popups"""
        try:
            list_url = f"{self.config.BITPANEL_URL}list"
            print(f"üîÑ Navegando para: {list_url}")
            
            self.driver.get(list_url)
            
            print("‚úÖ Navega√ß√£o para /list conclu√≠da")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro ao navegar para listas: {e}")
            return False

    def verificar_conexao(self, headless=True) -> bool:
        """Verifica se √© poss√≠vel fazer login no BitPanel."""
        print("üåê Verificando conex√£o com o BitPanel...")
        try:
            resultado = self.login(headless=headless)
            if resultado and not headless:
                # Se n√£o for headless, testa navega√ß√£o para /list
                self.navegar_para_listas()
            
            if self.driver and headless:
                # Se for headless, fecha automaticamente ap√≥s verifica√ß√£o
                self.close()
            return resultado
        except Exception as e:
            print(f"‚ùå Erro na verifica√ß√£o: {e}")
            return False

    def _get_list_info_from_page(self) -> dict:
        """Extrai as informa√ß√µes da lista da p√°gina de detalhes."""
        wait = WebDriverWait(self.driver, 15)
        try:
            user_info_element = wait.until(EC.presence_of_element_located((By.CLASS_NAME, "user-infor")))
            info_text = user_info_element.text
            
            info = {}
            for line in info_text.split('\n'):
                if ':' in line:
                    key, value = line.split(':', 1)
                    info[key.strip().lower()] = value.strip()
            
            info.pop('clique aqui para ver o link da lista', None)
            print(f"‚ÑπÔ∏è Informa√ß√µes da lista extra√≠das: {info}")
            return info
        except TimeoutException:
            print("‚ùå Erro: N√£o foi poss√≠vel encontrar as informa√ß√µes da lista (classe 'user-infor').")
            return None
        except Exception as e:
            print(f"‚ùå Erro inesperado ao extrair informa√ß√µes da lista: {e}")
            return None

    def _extrair_dados_lista(self, wait: WebDriverWait) -> dict:
        """
        Extrai TODOS os dados da p√°gina de informa√ß√µes do BitPanel.
        VERS√ÉO FINAL: Captura as datas EXATAMENTE como aparecem no BitPanel.
        """
        try:
            print("\n" + "="*60)
            print("[EXTRA√á√ÉO] Aguardando p√°gina de detalhes da lista...")
            print("="*60)
            
            # Espera o container 'user-infor' ficar vis√≠vel
            info_container = wait.until(EC.visibility_of_element_located((
                By.CLASS_NAME, "user-infor"
            )))
        
            print("[EXTRA√á√ÉO] ‚úì Container encontrado")
            
            # Pega todos os itens <li> dentro do container
            list_items = info_container.find_elements(By.TAG_NAME, "li")
            
            print(f"[EXTRA√á√ÉO] Encontrados {len(list_items)} campos de informa√ß√£o\n")
        
            dados_lista = {}
            
            for i, item in enumerate(list_items, 1):
                texto_completo = item.text.strip()
                
                # Ignorar campos vazios ou in√∫teis
                if not texto_completo or "clique aqui" in texto_completo.lower():
                    continue
                
                print(f"[EXTRA√á√ÉO] Campo {i}: '{texto_completo}'")
                
                if ":" in texto_completo:
                    # Dividir apenas no primeiro ":"
                    partes = texto_completo.split(":", 1)
                    if len(partes) == 2:
                        chave_original = partes[0].strip()
                        valor_original = partes[1].strip()
                        
                        # ========================================================
                        # MAPEAMENTO COMPLETO DE TODOS OS CAMPOS DO BITPANEL
                        # ========================================================
                        mapeamento_chaves = {
                            # Usu√°rio
                            'usu√°rio': 'usuario',
                            'usuario': 'usuario',
                            'usu√°rio iptv': 'usuario',
                            'nome do usu√°rio': 'usuario',
                            'nome do usuario': 'usuario',
                            'username': 'usuario',
                            'user': 'usuario',
                            
                            # Senha
                            'senha': 'senha',
                            'password': 'senha',
                            'pass': 'senha',
                            
                            # Conex√µes
                            'conex√µes': 'conexoes',
                            'conexoes': 'conexoes',
                            'connections': 'conexoes',
                            'max connections': 'conexoes',
                            'numero de conex√µes': 'conexoes',
                            'n√∫mero de conex√µes': 'conexoes',
                            
                            # Data de Cria√ß√£o (CR√çTICO)
                            'criado em': 'criado_em',
                            'criado': 'criado_em',
                            'Data de cria√ß√£o': 'criado_em',
                            'data cria√ß√£o': 'criado_em',
                            'data criacao': 'criado_em',
                            'created at': 'criado_em',
                            'created': 'criado_em',
                            'creation date': 'criado_em',
                            
                            # Data de Expira√ß√£o (CR√çTICO)
                            'expira em': 'expira_em',
                            'expira': 'expira_em',
                            'data de expira√ß√£o': 'expira_em',
                            'data expiracao': 'expira_em',
                            'data expira√ß√£o': 'expira_em',
                            'validade': 'expira_em',
                            'Data de validade': 'expira_em',
                            'expires at': 'expira_em',
                            'expires': 'expira_em',
                            'expiration date': 'expira_em',
                            'valid until': 'expira_em',
                            
                            # Plano
                            'plano': 'plano',
                            'plan': 'plano',
                            'pacote': 'plano',
                            'package': 'plano',
                            'plano de tv': 'plano',
                            'tv plan': 'plano',
                            
                            # Status
                            'status': 'status_bitpanel',
                            'estado': 'status_bitpanel',
                            'ativo': 'status_bitpanel',
                            'active': 'status_bitpanel',
                            'state': 'status_bitpanel',
                        }
                        
                        # Normalizar chave (min√∫sculas, sem espa√ßos extras)
                        chave_normalizada = chave_original.lower().strip()
                        
                        # Buscar no mapeamento
                        chave_final = mapeamento_chaves.get(chave_normalizada)
                        
                        # Se n√£o encontrou no mapeamento, criar chave gen√©rica
                        if not chave_final:
                            chave_final = chave_normalizada.replace(" ", "_").replace("√£", "a").replace("√ß", "c").replace("√©", "e")
                        
                        # Salvar o dado
                        dados_lista[chave_final] = valor_original
                        
                        # Log do mapeamento
                        print(f"  ‚Üí Mapeado: '{chave_original}' ‚Üí '{chave_final}' = '{valor_original}'")
            
            print("\n" + "="*60)
            print("[EXTRA√á√ÉO] Dados finais extra√≠dos:")
            print("="*60)
            for chave, valor in dados_lista.items():
                print(f"  {chave}: {valor}")
            print("="*60 + "\n")
            
            # ========================================================
            # VALIDA√á√ÉO CR√çTICA: Verificar se os campos essenciais existem
            # ========================================================
            campos_essenciais = ['usuario', 'senha', 'expira_em']
            campos_faltando = []
            
            for campo in campos_essenciais:
                if campo not in dados_lista:
                    campos_faltando.append(campo)
            
            if campos_faltando:
                print(f"[EXTRA√á√ÉO] ‚ö† AVISO: Campos essenciais n√£o encontrados: {campos_faltando}")
                print(f"[EXTRA√á√ÉO]   Campos dispon√≠veis: {list(dados_lista.keys())}")
            
            # Data de cria√ß√£o n√£o √© obrigat√≥ria (algumas listas antigas podem n√£o ter)
            if 'criado_em' not in dados_lista:
                print(f"[EXTRA√á√ÉO] ‚ö† AVISO: Campo 'criado_em' n√£o encontrado - lista antiga?")
            
            return dados_lista

        except TimeoutException:
            print("\n[EXTRA√á√ÉO] ‚ùå TIMEOUT: Container 'user-infor' n√£o carregou")
            print("[EXTRA√á√ÉO]   Tentando capturar qualquer texto vis√≠vel...")
            
            try:
                # Tentar pegar todo o texto da p√°gina
                body_text = self.driver.find_element(By.TAG_NAME, "body").text
                print(f"[EXTRA√á√ÉO]   Texto da p√°gina:\n{body_text[:500]}...")
                
                # Salvar screenshot
                screenshot_name = f"erro_timeout_extracao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                self.driver.save_screenshot(screenshot_name)
                print(f"[EXTRA√á√ÉO]   Screenshot salvo: {screenshot_name}")
            except:
                print("[EXTRA√á√ÉO]   N√£o foi poss√≠vel capturar informa√ß√µes da p√°gina")
            
            return None
            
        except Exception as e:
            print(f"\n[EXTRA√á√ÉO] ‚ùå ERRO INESPERADO: {type(e).__name__}: {str(e)}")
            
            try:
                screenshot_name = f"erro_extracao_{datetime.now().strftime('%Y%m%d_%H%M%S')}.png"
                self.driver.save_screenshot(screenshot_name)
                print(f"[EXTRA√á√ÉO]   Screenshot salvo: {screenshot_name}")
            except:
                pass
            
            import traceback
            traceback.print_exc()
            
            return None

    
    def criar_lista(self, username: str, conexoes: int, duracao_meses: int, headless=False):
        """
        Cria uma nova lista de usu√°rio no painel usando seletores precisos e robustos.
        """
        if not self.login(headless=headless):
            print("‚ùå Falha no login. Abortando cria√ß√£o de lista.")
            return None

        try:
            print(f"üîß Iniciando cria√ß√£o da lista para o usu√°rio: {username}")
            if not self.navegar_para_listas():
                return None
        
            wait = WebDriverWait(self.driver, 20)
        
            # --- PASSO 0: Clicar no bot√£o de adicionar ---
            print("   - 0. Clicando no bot√£o de adicionar...")
            add_button = wait.until(EC.presence_of_element_located((By.CSS_SELECTOR, "button.v-btn--fab .mdi-plus")))
            self.driver.execute_script("arguments[0].click();", add_button)
        
            # --- PASSO 1: Digitar o Nome de Usu√°rio ---
            print(f"   - 1. Preenchendo nome de usu√°rio: '{username}'")
            username_field = wait.until(EC.visibility_of_element_located((
            By.XPATH,
            "//label[contains(text(), 'Nome do usu√°rio')]/../input"
            )))
            username_field.send_keys(username)

            # --- PASSO 2: Selecionar o Plano de TV (CORRIGIDO) ---
            print("   - 2. Selecionando plano de TV...")

            # 1. Clica no campo do dropdown para abrir a lista de op√ß√µes (esta parte j√° estava correta)
            plan_tv_dropdown = wait.until(EC.element_to_be_clickable((
                By.XPATH, 
                "//div[@role='button' and .//label[contains(text(), 'Selecione o plano de tv')]]"
            )))
            self.driver.execute_script("arguments[0].click();", plan_tv_dropdown)

            # 2. Espera a op√ß√£o com o TEXTO EXATO aparecer e clica nela (ESTA √â A PARTE CORRIGIDA)
            plan_tv_option = wait.until(EC.element_to_be_clickable((
                By.XPATH, 
                "//div[contains(@class, 'v-list-item__title') and normalize-space(text()) = 'Full HD + H265 + HD + SD + VOD + Adulto + LGBT']"
            )))
            self.driver.execute_script("arguments[0].click();", plan_tv_option)         

            # --- PASSO 3: Selecionar o Plano de Pre√ßo (CORRIGIDO E ROBUSTO) ---
            print("   - 3. Selecionando plano de pre√ßo (Basico)...")

            # 1. Clica no campo do dropdown para abrir a lista de op√ß√µes
            plan_price_dropdown = wait.until(EC.element_to_be_clickable((           
            By.XPATH, 
            # Encontra o campo clic√°vel que cont√©m o label "Selecione o plano"
            "//div[@role='button' and .//label[contains(text(), 'Selecione o plano') and not(contains(text(), 'de tv'))]]"
            )))
            self.driver.execute_script("arguments[0].click();", plan_price_dropdown)

            # 2. Espera a op√ß√£o com o texto exato "Basico, R$ 30,00" aparecer e clica nela
            plan_price_option = wait.until(EC.element_to_be_clickable((
                By.XPATH, 
                "//div[contains(@class, 'v-list-item__title') and normalize-space(text()) = 'Basico, R$ 30,00']"
            )))
            self.driver.execute_script("arguments[0].click();", plan_price_option)

            # --- PASSO 4: Configurar Conex√µes (Vers√£o Final Robusta) ---
            print(f"   - 4. Configurando para {conexoes} conex√£o(√µes)...")

            if 1 <= conexoes <= 10:
                # 1. Encontra o container principal do slider, que √© o alvo para as teclas.
                slider = wait.until(EC.visibility_of_element_located((
                    By.XPATH,
                    "//div[contains(text(), 'Selecione a quantidade de conex√µes')]/following-sibling::div//div[@role='slider']"
                )))

                # 2. Encontra a "trilha" do slider (a barra) para clicar e ativar o componente.
                slider_track = wait.until(EC.element_to_be_clickable((
                    By.XPATH,
                    "//div[contains(text(), 'Selecione a quantidade de conex√µes')]/following-sibling::div//div[contains(@class, 'v-slider__track-container')]"
                )))

                # 3. CLICA na trilha para garantir que o slider est√° focado.
                # Usamos JavaScript para um clique mais confi√°vel.
                self.driver.execute_script("arguments[0].click();", slider_track)
                time.sleep(0.3)

                # 4. Obt√©m o valor inicial do slider.
                try:
                    current_value = int(slider.get_attribute('aria-valuenow'))
                except (ValueError, TypeError):
                    current_value = 0

                # 5. Calcula quantos passos para a direita o rob√¥ precisa dar.
                steps_to_move = conexoes - current_value
    
                # 6. Pressiona a seta para a direita o n√∫mero de vezes necess√°rio.
                if steps_to_move > 0:
                    print(f"   - Movendo o slider {steps_to_move} vez(es) para a direita...")
                    for _ in range(steps_to_move):
                        slider.send_keys(Keys.ARROW_RIGHT)
                        time.sleep(0.1)

            else:
                print(f"AVISO: N√∫mero de conex√µes '{conexoes}' inv√°lido. Deixando o valor padr√£o.")

            # --- PASSO 5: Selecionar a Validade em Meses (CORRIGIDO E ROBUSTO) ---
            print(f"   - 5. Selecionando validade de {duracao_meses} m√™s(es)...")

            # 1. Clica no campo do dropdown para abrir a lista de op√ß√µes
            validade_dropdown = wait.until(EC.element_to_be_clickable((
                By.XPATH,
                # Seletor refinado para encontrar o campo clic√°vel pela sua fun√ß√£o e texto
                "//div[@role='button' and .//label[contains(text(), 'Selecione a validade')]]"
            )))
            self.driver.execute_script("arguments[0].click();", validade_dropdown)

            # 2. Espera a op√ß√£o desejada aparecer e clica nela
            if 1 <= duracao_meses <= 12:
                # Determina o texto correto (singular ou plural)
                texto_opcao = f"{duracao_meses} M√™s" if duracao_meses == 1 else f"{duracao_meses} Meses"
                
                mes_option = wait.until(EC.element_to_be_clickable((
                    By.XPATH,
                    f"//div[contains(@class, 'v-list-item__title') and normalize-space(text()) = '{texto_opcao}']"
                )))
                self.driver.execute_script("arguments[0].click();", mes_option)
            else:
                print(f"AVISO: Dura√ß√£o '{duracao_meses}' inv√°lida. Deixando o valor padr√£o.")

            # --- PASSO 6: Clicar no Bot√£o "Criar" ---
            print("   - 6. Clicando no bot√£o 'Criar'...")
            criar_button = wait.until(EC.element_to_be_clickable((
                By.XPATH,
                "//div[contains(@class, 'v-dialog--active')]//span[normalize-space(text())='Criar']/parent::button"
            )))
            self.driver.execute_script("arguments[0].click();", criar_button)
            
            # --- PASSO 7: Extrair os Dados da Lista Criada ---
            # A fun√ß√£o auxiliar far√° a espera e a extra√ß√£o
            dados_finais = self._extrair_dados_lista(wait)
        
            if dados_finais:
                print(f"\nüéâ SUCESSO! Lista para '{dados_finais.get('usuario', username)}' foi criada e dados foram capturados.")
                return dados_finais
            else:
                print("\n‚ö†Ô∏è AVISO: A lista pode ter sido criada, mas n√£o foi poss√≠vel capturar os dados da p√°gina de confirma√ß√£o.")
                return {"status": "parcial", "usuario": username, "mensagem": "Lista criada, mas falha ao capturar dados."}

        except TimeoutException as e:
            print(f"‚ùå ERRO DE AUTOMA√á√ÉO (TIMEOUT): Um elemento n√£o foi encontrado a tempo. Verifique o seletor ou a velocidade da sua internet. Erro: {e}")
            self.driver.save_screenshot('erro_timeout.png')
            print("   - Screenshot 'erro_timeout.png' salvo para an√°lise.")
            return None
        except Exception as e:
            print(f"‚ùå ERRO INESPERADO ao criar lista: {e}")
            self.driver.save_screenshot('erro_inesperado.png')
            print("   - Screenshot 'erro_inesperado.png' salvo para an√°lise.")
            return None

    def renovar_lista(self, username: str, duracao_meses: int, headless=False) -> dict:
        """
        Busca um usu√°rio pelo nome e renova sua assinatura.
        CORRIGIDO: Agora captura e retorna as informa√ß√µes atualizadas da lista.
        """
        if not self.login(headless=headless):
            print("‚ùå Falha no login. Abortando renova√ß√£o.")
            return {"erro": "Falha no login"}

        try:
            print(f"üîÑ Renovando lista para o usu√°rio: {username} por {duracao_meses} m√™s(es)")
            if not self.navegar_para_listas():
                return {"erro": "Falha ao navegar para listas"}

            wait = WebDriverWait(self.driver, 20)

            # --- PASSO 1: Buscar pelo usu√°rio ---
            print(f"   - 1. Buscando usu√°rio '{username}' na lista...")
            search_field = wait.until(EC.visibility_of_element_located((
                By.XPATH,
                "//label[contains(text(), 'Buscar por nome')]/following-sibling::input"
             )))
            search_field.click()
            search_field.clear()
            search_field.send_keys(username)
            search_field.send_keys(Keys.ENTER)
            time.sleep(2)  # tempo para a tabela atualizar

            # --- PASSO 2a: Clicar no menu sandu√≠che do usu√°rio ---
            print("   - 2a. Clicando no menu sandu√≠che do usu√°rio...")
            menu_button = wait.until(EC.element_to_be_clickable((       
                By.XPATH,
                f"//td[normalize-space(text())='{username}']/following-sibling::td//i[contains(@class,'mdi-dots-vertical')]"
            )))
            self.driver.execute_script("arguments[0].click();", menu_button)

            # --- PASSO 2b: Clicar na op√ß√£o "Renovar" no menu aberto ---
            print("   - 2b. Clicando na op√ß√£o 'Renovar'...")
            renovar_option = wait.until(EC.element_to_be_clickable((
                By.XPATH,
                "//div[@role='menuitem']//div[contains(@class,'v-list-item__title') and normalize-space(text())='Renovar']"
            )))
            self.driver.execute_script("arguments[0].click();", renovar_option)
            
            # --- PASSO 3: Selecionar plano ---
            print("   - 3. Selecionando plano de pre√ßo (Basico)...")
            plan_price_dropdown = wait.until(EC.element_to_be_clickable((
                 By.XPATH,
                "//div[@role='button' and .//label[contains(text(), 'Selecione o plano') and not(contains(text(), 'de tv'))]]"
            )))
            self.driver.execute_script("arguments[0].click();", plan_price_dropdown)

            plan_price_option = wait.until(EC.element_to_be_clickable((
                By.XPATH,
                "//div[contains(@class, 'v-list-item__title') and normalize-space(text()) = 'Basico, R$ 30,00']"
            )))
            self.driver.execute_script("arguments[0].click();", plan_price_option)
            
            # --- PASSO 4: Selecionar validade ---
            print(f"   - 4. Selecionando validade de {duracao_meses} m√™s(es)...")
            validade_dropdown = wait.until(EC.element_to_be_clickable((
                By.XPATH,
                "//div[@role='button' and .//label[contains(text(), 'Selecione a validade')]]"
            )))
            self.driver.execute_script("arguments[0].click();", validade_dropdown)

            texto_opcao = f"{duracao_meses} M√™s" if duracao_meses == 1 else f"{duracao_meses} Meses"
            mes_option = wait.until(EC.element_to_be_clickable((
                By.XPATH,
                f"//div[contains(@class, 'v-list-item__title') and normalize-space(text()) = '{texto_opcao}']"
            )))
            self.driver.execute_script("arguments[0].click();", mes_option)

            # --- PASSO 5: Clicar no bot√£o Renovar ---
            print("   - 5. Salvando altera√ß√µes...")
            renovar_button = wait.until(EC.element_to_be_clickable((
                By.XPATH,
                "//div[contains(@class, 'v-dialog--active')]//span[normalize-space(text())='Renovar']/parent::button"
            )))
            self.driver.execute_script("arguments[0].click();", renovar_button)
            
            # --- PASSO 6: Extrair os Dados da Lista Renovada ---
            print("   - 6. Capturando informa√ß√µes atualizadas da lista...")
            dados_finais = self._extrair_dados_lista(wait)
        
            if dados_finais:
                print(f"\nüéâ SUCESSO! Lista '{username}' foi renovada e dados foram capturados.")
                return dados_finais
            else:
                print("\n‚ö†Ô∏è AVISO: A lista pode ter sido renovada, mas n√£o foi poss√≠vel capturar os dados da p√°gina de confirma√ß√£o.")
                return {"status": "parcial", "usuario": username, "mensagem": "Renova√ß√£o enviada, mas falha ao capturar dados."}

        except TimeoutException as e:
            print(f"‚ùå ERRO DE AUTOMA√á√ÉO (TIMEOUT): Um elemento n√£o foi encontrado a tempo. Erro: {e}")
            self.driver.save_screenshot('erro_timeout_renovacao.png')
            return {"erro": f"Timeout: {str(e)}"}
        except Exception as e:
            print(f"‚ùå ERRO INESPERADO ao renovar lista: {e}")
            self.driver.save_screenshot('erro_renovacao.png')
            return {"erro": f"Erro inesperado: {str(e)}"}

    def sincronizar_dados_usuario(self, username: str, headless=True) -> dict:
        """
        Busca um usu√°rio pelo nome e captura suas informa√ß√µes atualizadas.
        VERS√ÉO MELHORADA com logs detalhados
        """
        if not self.login(headless=headless):
            print("‚ùå Falha no login. Abortando sincroniza√ß√£o.")
            return {"erro": "Falha no login"}

        try:
            print(f"üîÑ Sincronizando dados do usu√°rio: {username}")
            if not self.navegar_para_listas():
                return {"erro": "Falha ao navegar para listas"}

            wait = WebDriverWait(self.driver, 20)

            # --- PASSO 1: Buscar pelo usu√°rio ---
            print(f"   - 1. Buscando usu√°rio '{username}' na lista...")
            
            try:
                search_field = wait.until(EC.visibility_of_element_located((
                    By.XPATH,
                    "//label[contains(text(), 'Buscar por nome')]/following-sibling::input"
                )))
                search_field.click()
                search_field.clear()
                search_field.send_keys(username)
                search_field.send_keys(Keys.ENTER)
                time.sleep(3)  # tempo para a tabela atualizar
                print(f"   - Busca realizada, aguardando resultados...")
            except TimeoutException:
                print(f"   - ‚ùå Campo de busca n√£o encontrado")
                return {"erro": "Campo de busca n√£o encontrado"}

            # Verificar se o usu√°rio apareceu nos resultados
            try:
                usuario_na_tabela = self.driver.find_element(
                    By.XPATH,
                    f"//td[normalize-space(text())='{username}']"
                )
                print(f"   - ‚úÖ Usu√°rio encontrado na tabela")
            except NoSuchElementException:
                print(f"   - ‚ùå Usu√°rio '{username}' n√£o encontrado nos resultados")
                return {"erro": f"Usu√°rio '{username}' n√£o encontrado"}

            # --- PASSO 2a: Clicar no menu sandu√≠che do usu√°rio ---
            print("   - 2a. Clicando no menu sandu√≠che do usu√°rio...")
            try:
                menu_button = wait.until(EC.element_to_be_clickable((       
                    By.XPATH,
                    f"//td[normalize-space(text())='{username}']/following-sibling::td//i[contains(@class,'mdi-dots-vertical')]"
                )))
                self.driver.execute_script("arguments[0].click();", menu_button)
                print(f"   - ‚úÖ Menu aberto")
            except TimeoutException:
                print(f"   - ‚ùå Menu sandu√≠che n√£o encontrado")
                return {"erro": "Menu n√£o encontrado"}

            # --- PASSO 2b: Clicar na op√ß√£o "Ver informa√ß√µes" no menu aberto ---
            print("   - 2b. Clicando na op√ß√£o 'Ver informa√ß√µes'...")
            try:
                ver_info_option = wait.until(EC.element_to_be_clickable((
                    By.XPATH,
                    "//a[contains(@class, 'v-list-item--link') and .//div[contains(@class,'v-list-item__title') and normalize-space(text())='Ver informa√ß√µes']]"
                )))
                self.driver.execute_script("arguments[0].click();", ver_info_option)
                print(f"   - ‚úÖ Navegando para p√°gina de informa√ß√µes")
            except TimeoutException:
                print(f"   - ‚ùå Op√ß√£o 'Ver informa√ß√µes' n√£o encontrada")
                return {"erro": "Op√ß√£o 'Ver informa√ß√µes' n√£o encontrada"}
            
            # --- PASSO 3: Extrair os Dados da Lista ---
            print("   - 3. Aguardando e capturando informa√ß√µes da lista...")
            dados_finais = self._extrair_dados_lista(wait)
        
            if dados_finais:
                print(f"\n‚úÖ SUCESSO! Dados do usu√°rio '{username}' sincronizados.")
                print(f"üìä Dados capturados: {dados_finais}")
                return dados_finais
            else:
                print(f"\n‚ö†Ô∏è AVISO: N√£o foi poss√≠vel capturar os dados da p√°gina de informa√ß√µes.")
                return {"erro": "Falha ao capturar dados da p√°gina"}

        except TimeoutException as e:
            print(f"‚ùå ERRO DE AUTOMA√á√ÉO (TIMEOUT): Um elemento n√£o foi encontrado a tempo. Erro: {e}")
            
            # Salvar screenshot para debug
            try:
                screenshot_name = f'erro_timeout_sync_{username}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png'
                self.driver.save_screenshot(screenshot_name)
                print(f"   - Screenshot '{screenshot_name}' salvo para an√°lise.")
            except:
                pass
            
            return {"erro": f"Timeout: {str(e)}"}
        except Exception as e:
            print(f"‚ùå ERRO INESPERADO ao sincronizar dados: {e}")
            
            # Salvar screenshot para debug
            try:
                screenshot_name = f'erro_sync_{username}_{datetime.now().strftime("%Y%m%d_%H%M%S")}.png'
                self.driver.save_screenshot(screenshot_name)
                print(f"   - Screenshot '{screenshot_name}' salvo para an√°lise.")
            except:
                pass
            
            import traceback
            traceback.print_exc()
            
            return {"erro": f"Erro inesperado: {str(e)}"}
        
        finally:
            # N√£o fechar o driver aqui se for reutilizado
            pass
    
    def close(self):
        if self.driver:
            try:
                self.driver.quit()
                print("üö™ Navegador fechado.")
            finally:
                self.driver = None
                self.is_logged_in = False

# --- Bloco de Execu√ß√£o Principal ---
if __name__ == "__main__":  
    manager = None
    try:
        manager = BitPanelManager()
        
        # Teste com interface gr√°fica para debug
        print("üß™ Testando conex√£o com BitPanel...")
        if manager.verificar_conexao(headless=False):
            print("\n--- Teste de Navega√ß√£o ---")
            print("‚úÖ Conex√£o estabelecida!")
            print("üîç Verifique se consegue acessar a p√°gina /list sem popups")
            
            input("\nPressione Enter para continuar com teste de cria√ß√£o (opcional)...")
            
            # Teste opcional de cria√ß√£o
            criar_teste = input("Quer testar cria√ß√£o de lista? (s/N): ").lower().strip()
            if criar_teste == 's':
                nova_lista = manager.criar_lista(username="teste_popup", conexoes=1, duracao_meses=1, headless=False)
                if nova_lista:
                    print(f"\n‚úÖ Lista criada: {nova_lista}")
        else:
            print("‚ùå Falha na conex√£o")

    except Exception as e:
        print(f"Ocorreu um erro: {e}")
    finally:
        if manager and input("\nFechar navegador? (s/N): ").lower().strip() == 's':
            manager.close()

